#!/bin/bash
################################################################################
#
#         FILE: g2_makedo
#
#        USAGE:  g2_makedo OPTIONS
#
#      OPTIONS: 
#          -h    print this help message
#          -j n  nr. of paw_jobs allowed to run simultaneously
#          -0:   dry-run (still created g2_do_sample)
#          -v:   verbose
#
#  DESCRIPTION: 
#
#  g2_makedo is part of the suite to test the CP-PAW code against the
#  G2 database.  
#
#  1) it constructs a shell script "g2_do_sample", which executes all
#  test calculations. Undesired test calculations can be removed
#
#  2) it updates all structure input files in the directory "Cases"
#   using the structure input files in the directory "Samples" and the
#   species information from "src/Species"
#
#  3) it uses the setup information in "src/specieslist"
#
#  4) it uses the unit cell hardwired below
#
#  5) g2_makedo must be executed as src/g2_makedo inside the main directory
#    of the database because it identifies the database with the
#    current directory
#
#  REQUIREMENTS: 
#
#     -- an excecutable paw_fast.x must be in the PATH variable. It
#        specifies the directory with the PAW binaries
#     -- src/Strcfiles
#     -- src/Speciesfiles
#     -- paw_resolve
#
#     the shell script g2_do_sample requires
#           -- paw_waittillempty
#
#  Example:
#
#    paw_makedo
#
#       AUTHOR: Peter Bloechl; peter.bloechl@tu-clausthal.de
#      CREATED: 17. Aug 2014
#
################################################################################
#-------------------------------------------------------------------------------
# help message
#-------------------------------------------------------------------------------
export USAGE="Usage of $0 \n"
USAGE="$USAGE \n"
USAGE="$USAGE \tg2_makedo options\n"
USAGE="$USAGE \n"
USAGE="$USAGE Purpose:\n"
USAGE="$USAGE \t initial setup of the G2 database\n"
USAGE="$USAGE \n"
USAGE="$USAGE Options:\n"
USAGE="$USAGE \t -h \t print this help message \n"
USAGE="$USAGE \t -j nr. of paw_jobs allowed to run simultaneously\n"
USAGE="$USAGE \t -0: dry-run\n"
USAGE="$USAGE \t\t   creates file g2_do_sample, but does not create directories\n"
USAGE="$USAGE \t -v: verbose\n"
USAGE="$USAGE \n"
USAGE="$USAGE Example:\n"
USAGE="$USAGE \t src/g2_makedo \n"
USAGE="$USAGE \n"
#-------------------------------------------------------------------------------
#  individual data
#-------------------------------------------------------------------------------
# name of the bin directory holding the executable ppaw_fast.x or paw_fast.x
# name do not allow any trailing blanks in PAWXDIR!
THISDIR=$(pwd)
export PAWXDIR=$(which paw_fast.x); PAWXDIR=${PAWXDIR%paw_fast.x}
export DRYRUN=no
export VERBOSE=no
export NJOBS=3
#
#-------------------------------------------------------------------------------
#  implement dry-run
#-------------------------------------------------------------------------------
function execute(){
    # || is "or" in [[...]], && is "and" in [[..]] 
    if [[ "${VERBOSE}" = "yes" ]] ; then
      echo "${@}"
    fi
    if [[ "${DRYRUN}" = "no" ]] ; then
      eval "$@"
      RC=$?
      if [[ $RC -ne 0 ]] ; then
        echo "error in $0: command $@ failed" >&2
        exit 1
      fi
    fi
}
#-------------------------------------------------------------------------------
#  resolve argument list
#-------------------------------------------------------------------------------
OPTSTRING=":j:hv0"
OPTIND=0
while getopts "${OPTSTRING}" OPT  ; do
  case $OPT in
    j)
      NJOBS=$OPTARG
      ;;
    h)   # help
      echo -e $USAGE
      exit 0
      ;;
    0)   #nothing:
      DRYRUN=yes
#      set -n
      ;;
    v)   #verbose
      VERBOSE=yes
#      set -v
#      set -x
      ;;
    \?)   # unknown option (placed into OPTARG, if OPTSTRING starts with :)
      echo "error in $0" >&2
      echo "invalid option -$OPTARG" >&2
      echo "retrieve argument list with:" >&2
      echo "$0 -h" >&2
      exit 1
      ;;
    :)    # no argument passed to option requiring one
      echo "error in $0" >&2
      echo "option -$OPTARG requires an additional argument" >&2
      exit 1
      ;;  
  esac
done
shift $(($OPTIND - 1))
if [[ -e $1 ]] ; then 
  echo "error in $0: argument present. none expected" >&2 
fi

if [[ "${VERBOSE}" == "yes" ]] ; then
  echo verbose=$VERBOSE
  echo dryrun=$DRYRUN
  echo OPTSTRING=$OPTSTRING
  echo args="$1"
fi
#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
G1DIR=$THISDIR
if [[ ${VERBOSE} = yes ]] ; then echo THISDIR=$THISDIR ; fi
if [[ ${VERBOSE} = yes ]] ; then echo PAWXDIR=$PAWXDIR ; fi
# 
if [[ ! -d $G1DIR/bin ]]; then 
   execute "mkdir $G1DIR/bin"
fi
#
#== define directory holding the structure files
SAMPLEDIR=$G1DIR/src/Strcfiles
if [[ ${VERBOSE} = yes ]] ; then echo SAMPLEDIR=$SAMPLEDIR ; fi
if [[ ! -d $SAMPLEDIR ]]; then 
   echo "error in $0: SAMPLEDIR=$SAMPLEDIR does not exist"
   exit 1 
fi
#== define directory with species information
STPDIR=$G1DIR/bin/Speciesfiles
if [[ ${VERBOSE} = yes ]] ; then echo STPDIR=$STPDIR ; fi
if [[ ! -d $STPDIR ]]; then 
   execute "mkdir $STPDIR"
fi
# 
CASESDIR=$G1DIR/Cases
if [[ ${VERBOSE} = yes ]] ; then echo CASESDIR=$CASESDIR ; fi
if [[ ! -d $CASESDIR ]]; then 
   execute "mkdir $CASESDIR"
fi
SPECIESDIR=$G1DIR/bin/Speciesfiles
if [[ ${VERBOSE} = yes ]] ; then echo SPECIESDIR=$SPECIESDIR ; fi
if [[ ! -d $SPECIESDIR ]]; then 
   execute "mkdir $SPECIESDIR"
fi
#
#######################################################################
#  extract src/specieslist into $SPECIESDIR/*.species
#######################################################################
execute "gfortran -o $G1DIR/bin/g2_splitspecieslist.x $G1DIR/src/g2_splitspecieslist.f90"
execute "cd $SPECIESDIR"
execute "$G1DIR/bin/g2_splitspecieslist.x <$G1DIR/src/specieslist "
execute "cd $THISDIR"
#
#######################################################################
#  prepare g2_do_sample
#######################################################################
DOSCRIPT=$G1DIR/g2_do_sample
if [[ ${VERBOSE} = yes ]] ; then echo DOSCRIPT=$DOSCRIPT ; fi
if [[ ${VERBOSE} = yes ]] ; then echo "writing DOSCRIPT ..." ; fi
echo '#!/bin/bash'                                >$DOSCRIPT
echo '# this file is created automatically by g2_makedo'    >>$DOSCRIPT
echo '#'                                          >>$DOSCRIPT
echo '# adjust the value of NNODES to the number' >>$DOSCRIPT
echo '# of paw_related jobs that may run simultaneously' >>$DOSCRIPT
echo '#'                                          >>$DOSCRIPT
echo '# uncomment or remove lines adding'         >>$DOSCRIPT
echo '# undesired substances to LIST'             >>$DOSCRIPT
echo '#'                                          >>$DOSCRIPT
echo "export THISDIR=\$(pwd)"                     >>$DOSCRIPT
echo "declare -ix NNODES=8"                       >>$DOSCRIPT
echo "export G1DIR=$G1DIR"                        >>$DOSCRIPT
echo '#'                                          >>$DOSCRIPT
echo 'function calcone {'                         >>$DOSCRIPT
echo 'ROOT=${G1DIR}/$1'                           >>$DOSCRIPT
echo 'if [[ -f ${ROOT}.out ]]; then'              >>$DOSCRIPT
echo '      rm ${ROOT}.out; fi'                   >>$DOSCRIPT
echo 'if [[ -f ${ROOT}.err ]]; then'              >>$DOSCRIPT
echo '      rm ${ROOT}.err ; fi'                  >>$DOSCRIPT
echo 'if [[ -f ${ROOT}_ballstick.dx ]]; then'     >>$DOSCRIPT
echo '      rm ${ROOT}_ballstick.dx ; fi'         >>$DOSCRIPT
echo 'if [[ -f ${ROOT}_constr.report ]]; then'    >>$DOSCRIPT
echo '      rm ${ROOT}_constr.report ; fi'        >>$DOSCRIPT
echo 'if [[ -f ${ROOT}_r.tra ]]; then'            >>$DOSCRIPT
echo '      rm ${ROOT}_r.tra; fi'                 >>$DOSCRIPT
echo 'if [[ -f ${ROOT}.pdos ]]; then'             >>$DOSCRIPT
echo '      rm ${ROOT}.pdos; fi'                  >>$DOSCRIPT
echo 'cp ${G1DIR}/sample.cntl ${ROOT}.cntl'       >>$DOSCRIPT
echo 'if [[ -f ${ROOT}.rstrt ]]; then'            >>$DOSCRIPT
echo '      cp ${ROOT}.rstrt ${ROOT}.rstrt_save1; fi' >>$DOSCRIPT
echo 'echo doing $1'                              >>$DOSCRIPT
echo 'cd ${ROOT%/*} # go to project directory'    >>$DOSCRIPT
echo 'PNAME=${ROOT##*/} # project name w/o Dir.'  >>$DOSCRIPT
echo 'paw_fast.x ${ROOT}.cntl 1>${ROOT}.err 2>&1' >>$DOSCRIPT
echo '#sbatchpaw \'                               >>$DOSCRIPT
echo '#   --ntasks=${NNODES} \'                   >>$DOSCRIPT
echo '#   -p low_priority \'                      >>$DOSCRIPT
echo '#   --pawversion=${PAWVERSION} \'           >>$DOSCRIPT
echo '#   --cntl=${PNAME}.cntl 1>${PNAME}.err 2>&1' >>$DOSCRIPT
echo '#doppaw ${ROOT}.cntl 1>${ROOT}.err 2>&1'    >>$DOSCRIPT
echo 'cd ${THISDIR} # return to orig. directory'  >>$DOSCRIPT
echo 'echo $1 done'                               >>$DOSCRIPT
echo '}'                                          >>$DOSCRIPT
echo '#'                                          >>$DOSCRIPT
#
################################################################
# Scan Samples directory and update all structure files in the 
#    Cases directory
# Produce a shell script calcall_sample to be executed
################################################################
echo "LIST=\"\""                                 >>$DOSCRIPT
for FILE in $SAMPLEDIR/*.strc_sample ; do
  if [[ ${VERBOSE} = yes ]] ; then echo FILE=$FILE ; fi

  NAME=${FILE%.strc_sample} # strip extension
  NAME=${NAME##*/}     #  remove all preceeding directories
  DIR=$CASESDIR/$NAME
  if [[ ! -d $DIR ]] ; then 
    execute "mkdir $DIR"
  fi
  execute "paw_resolve \
              -i $FILE \
              -r \"LATTICE=0.0 10.6 10.6 10.6 0.0 10.6 10.6 10.6 0.0\" \
              -f HYDROGEN=$STPDIR/H_.species \
              -f LITHIUM=$STPDIR/LI.species \
              -f BERYLLIUM=$STPDIR/BE.species \
              -f BORON=$STPDIR/B_.species \
              -f CARBON=$STPDIR/C_.species \
              -f NITROGEN=$STPDIR/N_.species \
              -f OXYGEN=$STPDIR/O_.species \
              -f FLOURINE=$STPDIR/F_.species \
              -f SODIUM=$STPDIR/NA.species \
              -f ALUMINIUM=$STPDIR/AL.species \
              -f SILICON=$STPDIR/SI.species \
              -f PHOSPHORUS=$STPDIR/P_.species \
              -f SULFUR=$STPDIR/S_.species \
              -f CHLORINE=$STPDIR/CL.species \
              -f BROMIUM=$STPDIR/BR.species \
              > $DIR/${NAME}.strc"
  #   create sample control file
    ROOT=${DIR}/$NAME
    ROOT=${ROOT#$G1DIR/} 
    echo "LIST=\"\$LIST ${ROOT}\""        >>$DOSCRIPT
done
echo 'for X in $LIST; do'                 >>$DOSCRIPT
echo "  paw_waittillempty -n \${NNODES}"  >>$DOSCRIPT #submit no more than 3 jobs at a time
echo "  calcone \$X &"                    >>$DOSCRIPT
echo "done"                               >>$DOSCRIPT 
execute "chmod +x $DOSCRIPT"              
exit 0





